// =======================================================
// APLIKASI KASIR - VERSI MASTER FINAL (19 Juni 2025)
// =======================================================

// --- KONFIGURASI & INISIALISASI FIREBASE ---
const firebaseConfig = {
    apiKey: "AIzaSyD0Qh1Fimh9iYT8dOi91beIbc1wDe80R0g",
    authDomain: "aplikasikasirpwa.firebaseapp.com",
    projectId: "aplikasikasirpwa",
    storageBucket: "aplikasikasirpwa.firebasestorage.app",
    messagingSenderId: "820452190086",
    appId: "1:820452190086:web:695af51a9d5ac707e22e07"
};
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();
const auth = firebase.auth();

// --- VARIABEL GLOBAL ---
let cart = JSON.parse(localStorage.getItem('keranjangBelanja')) || [];
let products = [];
let inventory = {};

// --- ELEMEN DOM ---
const productListEl = document.getElementById('product-list');
const cartItemsEl = document.getElementById('cart-items');
const totalPriceEl = document.getElementById('total-price');
const btnPayCash = document.getElementById('btn-pay-cash');
const validationListEl = document.getElementById('validation-list');
const transactionListEl = document.getElementById('transaction-list');
const logoutButton = document.getElementById('logout-button');
const modeManualRadio = document.getElementById('mode-manual');
const modeOtomatisRadio = document.getElementById('mode-otomatis');
const validationSection = document.querySelector('.validation-section');
const selfOrderingSwitchDiv = document.getElementById('self-ordering-switch');
const cashPaymentOverlay = document.getElementById('cash-payment-overlay');
const cashTotalAmountEl = document.getElementById('cash-total-amount');
const cashReceivedInput = document.getElementById('cash-received-input');
const cashChangeAmountEl = document.getElementById('cash-change-amount');
const confirmCashBtn = document.getElementById('confirm-cash-btn');
const cancelCashBtn = document.getElementById('cancel-cash-btn');

// =======================================================
// --- PENJAGA OTENTIKASI (GATEKEEPER) ---
// =======================================================
auth.onAuthStateChanged(user => {
    if (user) {
        document.body.classList.add('visible');
        initializeApp();
    } else {
        window.location.href = 'login.html';
    }
});

// =======================================================
// --- SEMUA FUNGSI ---
// =======================================================

function formatRupiah(number) { return new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR', minimumFractionDigits: 0 }).format(number); }
function createReceiptLine(leftText, rightText, maxChars = 30) { const leftLength = leftText.length; const rightLength = rightText.length; const spacesNeeded = maxChars - leftLength - rightLength; if (spacesNeeded < 1) { return `${leftText}\n${' '.repeat(maxChars - rightLength)}${rightText}`; } const spaces = ' '.repeat(spacesNeeded); return `${leftText}${spaces}${rightText}`; }
async function fetchInventory() { try { const doc = await db.collection('counters').doc('stock_tracker').get(); if (doc.exists) { inventory = doc.data(); } } catch (error) { console.error("Gagal memuat stok:", error); } }
async function fetchProducts() { productListEl.innerHTML = '<p>Memuat produk...</p>'; try { const snapshot = await db.collection('products').orderBy('name').get(); products = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); renderProducts(); } catch (error) { console.error("Error mengambil produk:", error); productListEl.innerHTML = '<p>Gagal memuat produk.</p>'; } }
function renderProducts() { productListEl.innerHTML = ''; products.forEach(product => { const productCard = document.createElement('div'); productCard.setAttribute('data-product-id', product.id); productCard.className = 'product-card'; const itemInCart = cart.find(item => item.id === product.id); const quantityInCart = itemInCart ? itemInCart.quantity : 0; if (quantityInCart > 0) { productCard.classList.add('in-cart'); } else { productCard.classList.remove('in-cart'); } let isOutOfStock = (product.stock_id && (inventory[product.stock_id] === undefined || inventory[product.stock_id] <= 0)); if (isOutOfStock) productCard.classList.add('out-of-stock'); productCard.innerHTML = `${quantityInCart > 0 ? `<div class="quantity-badge">${quantityInCart}</div>` : ''}<img src="${product.image || 'https://placehold.co/100x100?text=Produk'}" alt="${product.name}"><div class="product-name">${product.name}</div><div class="product-price">${formatRupiah(product.price)}</div>`; productListEl.appendChild(productCard); }); }
function renderCart() { cartItemsEl.innerHTML = ''; if (cart.length === 0) { cartItemsEl.innerHTML = '<p>Keranjang masih kosong.</p>'; } else { cart.forEach(item => { const cartItem = document.createElement('div'); cartItem.className = 'cart-item'; cartItem.innerHTML = `<span class="cart-item-name">${item.name}</span><div class="cart-item-controls"><button class="btn-quantity" data-id="${item.id}" data-action="decrease">-</button><input type="number" class="cart-item-quantity" value="${item.quantity}" min="1" data-id="${item.id}"><button class="btn-quantity" data-id="${item.id}" data-action="increase">+</button></div><span class="cart-item-price">${formatRupiah(item.price * item.quantity)}</span><button class="btn-remove" data-id="${item.id}">üóëÔ∏è</button>`; cartItemsEl.appendChild(cartItem); }); } const totalPrice = cart.reduce((total, item) => total + (item.price * item.quantity), 0); totalPriceEl.textContent = formatRupiah(totalPrice); localStorage.setItem('keranjangBelanja', JSON.stringify(cart)); }
function addToCart(productId, quantityToAdd = 1) { const product = products.find(p => p.id === productId); if (!product || !product.stock_id) { alert("Produk ini tidak memiliki ID Stok."); return; } const stockId = product.stock_id; const stockAvailable = inventory[stockId] || 0; let quantityOfSameStockInCart = 0; cart.forEach(item => { if (item.stock_id === stockId) quantityOfSameStockInCart += item.quantity; }); const existingItem = cart.find(item => item.id === productId); let finalQuantityToAdd = quantityToAdd; if (!existingItem && product.min_order > 1) { finalQuantityToAdd = Math.max(product.min_order, quantityToAdd); } if (quantityOfSameStockInCart + finalQuantityToAdd > stockAvailable) { alert(`Stok untuk kategori ini hanya tersisa ${stockAvailable}. Anda sudah memiliki ${quantityOfSameStockInCart} di keranjang.`); return; } if (existingItem) { existingItem.quantity += finalQuantityToAdd; } else { cart.push({ ...product, quantity: finalQuantityToAdd }); } renderCart(); updateProductCardUI(productId); }
function updateCartItemQuantity(productId, action) { const itemIndex = cart.findIndex(item => item.id === productId); if (itemIndex === -1) return; const item = cart[itemIndex]; const minOrder = item.min_order || 1; if (action === 'increase') { item.quantity++; } else if (action === 'decrease') { if (item.quantity - 1 < minOrder) { alert(`Minimal pembelian untuk ${item.name} adalah ${minOrder} pcs.`); return; } item.quantity--; if (item.quantity <= 0) cart.splice(itemIndex, 1); } renderCart(); updateProductCardUI(productId); }
function setCartItemQuantity(productId, newQuantity) { const itemIndex = cart.findIndex(item => item.id === productId); if (itemIndex === -1) return; const item = cart[itemIndex]; const minOrder = item.min_order || 1; const quantity = parseInt(newQuantity); if (isNaN(quantity)) { renderCart(); updateProductCardUI(productId); return; } if (quantity < minOrder) { alert(`Minimal pembelian untuk ${item.name} adalah ${minOrder} pcs.`); if (quantity <= 0 && minOrder <= 1) cart.splice(itemIndex, 1); } else { item.quantity = quantity; } renderCart(); updateProductCardUI(productId); }
function removeItemFromCart(productId) { const itemIndex = cart.findIndex(item => item.id === productId); if (itemIndex > -1) { cart.splice(itemIndex, 1); renderCart(); updateProductCardUI(productId); } }
function updateProductCardUI(productId) { const productCard = document.querySelector(`.product-card[data-product-id="${productId}"]`); if (!productCard) return; const itemInCart = cart.find(item => item.id === productId); const quantityInCart = itemInCart ? itemInCart.quantity : 0; let badge = productCard.querySelector('.quantity-badge'); if (quantityInCart > 0) { if (!badge) { badge = document.createElement('div'); badge.className = 'quantity-badge'; productCard.prepend(badge); } badge.textContent = quantityInCart; productCard.classList.add('in-cart'); } else { if (badge) badge.remove(); productCard.classList.remove('in-cart'); } }
async function updateStock(items) { const stockRef = db.collection('counters').doc('stock_tracker'); const stockToReduce = {}; items.forEach(item => { if (item.stock_id) stockToReduce[item.stock_id] = (stockToReduce[item.stock_id] || 0) + item.quantity; }); if (Object.keys(stockToReduce).length === 0) return; return db.runTransaction(async (transaction) => { const stockDoc = await transaction.get(stockRef); if (!stockDoc.exists) throw new Error("Dokumen stok tidak ditemukan!"); const currentStock = stockDoc.data(); const updates = {}; const historyBatch = db.batch(); for (const stockId in stockToReduce) { const reductionAmount = stockToReduce[stockId]; if (!currentStock[stockId] || currentStock[stockId] < reductionAmount) throw new Error(`Stok untuk ${stockId.replace(/_/g, ' ')} tidak mencukupi!`); updates[stockId] = firebase.firestore.FieldValue.increment(-reductionAmount); const historyRef = db.collection('stock_history').doc(); historyBatch.set(historyRef, { stock_id: stockId, change: -reductionAmount, reason: "Penjualan", timestamp: firebase.firestore.FieldValue.serverTimestamp() }); } transaction.update(stockRef, updates); return historyBatch.commit(); }); }
async function getNextQueueNumber() { let newQueueNumber = 1; const counterRef = db.collection('counters').doc('dailyQueue'); const todayStr = new Date().toISOString().slice(0, 10); try { const counterDoc = await counterRef.get(); if (counterDoc.exists) { const data = counterDoc.data(); if (data.lastResetDate === todayStr) newQueueNumber = data.lastNumber + 1; } await counterRef.set({ lastNumber: newQueueNumber, lastResetDate: todayStr }, { merge: true }); return newQueueNumber; } catch (error) { return Math.floor(Math.random() * 100); } }
async function finalizeTransaction(items, customerName = 'Walk-in Customer', originalOrderId = null) { await updateStock(items); const queueNumber = await getNextQueueNumber(); const totalAmount = items.reduce((total, item) => total + (Number(item.price) * Number(item.quantity)), 0); const finalTransactionData = { items: items, totalAmount: totalAmount, createdAt: firebase.firestore.FieldValue.serverTimestamp(), status: "Sedang Disiapkan", queueNumber: queueNumber, customerName: customerName, originalOrderId: originalOrderId }; const docRef = await db.collection('transactions').add(finalTransactionData); if (originalOrderId) { await db.collection('pending_orders').doc(originalOrderId).delete(); } return { id: docRef.id, ...finalTransactionData, createdAt: new Date() }; }
function printReceipt(transaction, paymentInfo = {}) { const storeInfo = { name: "Dimsum Denaya", address: "Jl. Pucung No.13...<br>(Teras Abu Bakar Mart)", phone: "WA: 0878-..." }; const txDateObject = transaction.createdAt.toDate ? transaction.createdAt.toDate() : transaction.createdAt; const txDate = txDateObject.toLocaleString('id-ID', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' }); let itemsText = ''; transaction.items.forEach(item => { const itemName = `${item.name} (x${item.quantity})`; const itemTotal = formatRupiah(item.price * item.quantity); itemsText += `<pre class="item-line-text">${createReceiptLine(itemName, itemTotal)}</pre>`; }); const totalLine = createReceiptLine('TOTAL', formatRupiah(transaction.totalAmount)); let paymentHtml = `<pre class="total-line">${totalLine}</pre>`; if (paymentInfo.method === 'cash') { const cashLine = createReceiptLine('TUNAI', formatRupiah(paymentInfo.cashAmount)); const changeLine = createReceiptLine('KEMBALI', formatRupiah(paymentInfo.changeAmount)); paymentHtml += `<pre>${cashLine}</pre><pre>${changeLine}</pre>`; } const qrId = transaction.originalOrderId || transaction.id; const statusUrl = `${window.location.origin}/status.html?id=${qrId}`; let qrCodeHtml = '<p>Gagal...</p>'; const qrOptions = { width: 300, margin: 1, errorCorrectionLevel: 'H' }; QRCode.toDataURL(statusUrl, qrOptions).then(url => { qrCodeHtml = `<img src="${url}" alt="QR Code" style="width: 100%; max-width: 200px;">`; }).catch(err => { console.error('Gagal membuat QR Code', err); }).finally(() => { const receiptHtml = `<html><head><title>Struk</title><style>body{font-family:'Courier New',monospace;font-size:12px;color:#000;width:100%;max-width:280px;margin:0;padding:5px}p{margin:2px 0}pre{white-space:pre-wrap;margin:0;font-family:'Courier New',monospace;font-size:12px}.text-center{text-align:center}h1{font-size:16px;margin:0}.header p{font-size:10px;word-break:break-word}.queue-number{font-size:28px;font-weight:700;margin:10px 0;padding:5px;border:2px dashed #000}.separator{border-top:1px dashed #000;margin:10px 0}.item-line-text{margin-bottom:2px}.total-line{font-weight:700;margin-top:5px;border-top:1px solid #000;padding-top:5px}.footer{margin-top:15px}</style></head><body><div class="text-center header"><h1>${storeInfo.name}</h1><p>${storeInfo.address}</p><p>${storeInfo.phone}</p></div><div class="separator"></div><p>No: ${transaction.id.substring(0, 8)}</p><p>Tgl: ${txDate}</p><p>Antrian: #${transaction.queueNumber || '-'}</p><div class="separator"></div>${itemsText}<div class="separator"></div>${paymentHtml}<div class="footer text-center"><p>Terima kasih!</p><p>Pantau status pesanan Anda.</p><div style="margin-top:10px;">${qrCodeHtml}</div></div></body></html>`; const printWindow = window.open('', '_blank'); printWindow.document.write(receiptHtml); printWindow.document.close(); printWindow.focus(); printWindow.onload = () => printWindow.print(); }); }
function listenForPendingOrders() { db.collection('pending_orders').onSnapshot(snapshot => { const manualValidationItems = []; snapshot.docChanges().forEach(change => { if (change.type === 'added') { const orderData = change.doc.data(); const orderId = change.doc.id; if (orderData.status === 'siap_diproses') { finalizeTransaction(orderData.items, orderData.customerName, orderId).then(() => alert(`Pesanan Otomatis Masuk untuk ${orderData.customerName}!`)).catch(error => { alert(`GAGAL memproses pesanan otomatis: ${error.message}`); db.collection('pending_orders').doc(orderId).delete(); }); } else if (orderData.status === 'menunggu_validasi') { manualValidationItems.push({ id: orderId, ...orderData }); } } }); validationListEl.innerHTML = ''; if (manualValidationItems.length > 0) { manualValidationItems.forEach(order => { const validationItem = document.createElement('div'); validationItem.className = 'validation-item'; let itemsSummary = order.items.map(item => `${item.name} (x${item.quantity})`).join(', '); validationItem.innerHTML = `<p class="validation-name">${order.customerName}</p><p class="validation-details">${itemsSummary}</p><p class="validation-details"><strong>Total: ${formatRupiah(order.totalAmount)}</strong></p><div class="validation-actions"><button class="btn-approve" data-id="${order.id}">‚úîÔ∏è Setujui</button><button class="btn-reject" data-id="${order.id}">‚ùå Tolak</button></div>`; validationListEl.appendChild(validationItem); }); } else { validationListEl.innerHTML = '<p class="info-text">Belum ada pembayaran yang perlu divalidasi.</p>'; } }, err => console.error("Error pada listener pending_orders:", err)); }
function setupSettings() { const settingRef = db.collection('settings').doc('payment'); settingRef.onSnapshot(doc => { if (doc.exists) { const settings = doc.data(); const activeMethod = settings.active_method || 'manual'; if (activeMethod === 'otomatis') modeOtomatisRadio.checked = true; else modeManualRadio.checked = true; const selfOrderingEnabled = settings.self_ordering_enabled !== false; if (selfOrderingEnabled) document.getElementById('mode-on').checked = true; else document.getElementById('mode-off').checked = true; if (activeMethod === 'manual') validationSection.classList.remove('hidden'); else validationSection.classList.add('hidden'); } }); document.getElementById('payment-mode-switch').addEventListener('change', (e) => { settingRef.update({ active_method: e.target.value }); }); selfOrderingSwitchDiv.addEventListener('change', (e) => { settingRef.update({ self_ordering_enabled: e.target.value === 'true' }); }); }

// --- EVENT LISTENERS ---
cartItemsEl.addEventListener('click', (event) => { if (event.target.classList.contains('btn-quantity')) updateCartItemQuantity(event.target.dataset.id, event.target.dataset.action); if (event.target.classList.contains('btn-remove')) removeItemFromCart(event.target.dataset.id); });
cartItemsEl.addEventListener('change', (event) => { if (event.target.classList.contains('cart-item-quantity')) setCartItemQuantity(event.target.dataset.id, event.target.value); });
validationListEl.addEventListener('click', async (event) => { const target = event.target; const orderId = target.dataset.id; if (!orderId) return; if (target.classList.contains('btn-approve')) { target.disabled = true; target.textContent = 'Memproses...'; try { const pendingOrderDoc = await db.collection('pending_orders').doc(orderId).get(); if (!pendingOrderDoc.exists) throw new Error("Pesanan tidak ditemukan lagi."); const orderData = pendingOrderDoc.data(); await finalizeTransaction(orderData.items, orderData.customerName, orderId); alert(`Pesanan untuk ${orderData.customerName} berhasil disetujui.`); } catch (error) { alert(`Gagal menyetujui pesanan: ${error.message}`); target.disabled = false; target.textContent = '‚úîÔ∏è Setujui'; } } if (target.classList.contains('btn-reject')) { if (confirm(`Anda yakin ingin menolak pesanan ini?`)) { try { await db.collection('pending_orders').doc(orderId).delete(); alert('Pesanan berhasil ditolak.'); } catch (error) { alert('Gagal menolak pesanan.'); } } } });
transactionListEl.addEventListener('click', async (event) => { const target = event.target; if (!target.classList.contains('btn-action')) { const transactionItem = target.closest('.transaction-item'); if (transactionItem) { const detailsDiv = transactionItem.querySelector('.tx-item-details'); if (detailsDiv) detailsDiv.classList.toggle('hidden'); } return; } const transactionId = target.dataset.id; if (!transactionId) return; if (target.classList.contains('btn-change-status')) { const currentStatus = target.dataset.status; let newStatus = ''; if (currentStatus === "Sedang Disiapkan") newStatus = "Siap Diambil"; else if (currentStatus === "Siap Diambil") newStatus = "Selesai"; if (newStatus) { try { await db.collection('transactions').doc(transactionId).update({ status: newStatus }); } catch (error) { console.error("Gagal update status:", error); alert("Gagal update status."); } } } if (target.classList.contains('btn-reprint')) { try { const doc = await db.collection('transactions').doc(transactionId).get(); if (doc.exists) { const transactionData = { id: doc.id, ...doc.data() }; printReceipt(transactionData); } } catch (error) { console.error("Gagal mengambil data untuk cetak ulang:", error); alert(`Gagal mencetak ulang struk: ${error.message}`); } } });
btnPayCash.addEventListener('click', () => { if (cart.length === 0) { alert('Keranjang kosong.'); return; } const total = cart.reduce((total, item) => total + (item.price * item.quantity), 0); cashTotalAmountEl.textContent = formatRupiah(total); cashChangeAmountEl.textContent = formatRupiah(0); cashReceivedInput.value = ''; cashPaymentOverlay.classList.remove('hidden'); cashReceivedInput.focus(); });
cashReceivedInput.addEventListener('input', () => { const total = cart.reduce((total, item) => total + (item.price * item.quantity), 0); const received = parseInt(cashReceivedInput.value) || 0; const change = received - total; if (change >= 0) { cashChangeAmountEl.textContent = formatRupiah(change); } else { cashChangeAmountEl.textContent = '-'; } });
cancelCashBtn.addEventListener('click', () => { cashPaymentOverlay.classList.add('hidden'); });
confirmCashBtn.addEventListener('click', async () => { const total = cart.reduce((total, item) => total + (item.price * item.quantity), 0); const received = parseInt(cashReceivedInput.value) || 0; if (received < total) { alert('Uang yang diterima kurang dari total belanja.'); return; } confirmCashBtn.disabled = true; confirmCashBtn.textContent = 'Memproses...'; try { const finalTransactionData = await finalizeTransaction(cart); const paymentInfo = { method: 'cash', cashAmount: received, changeAmount: received - total }; printReceipt(finalTransactionData, paymentInfo); cart = []; localStorage.removeItem('keranjangBelanja'); renderCart(); cashPaymentOverlay.classList.add('hidden'); } catch (error) { alert(`Transaksi gagal: ${error.message}`); } finally { confirmCashBtn.disabled = false; confirmCashBtn.textContent = 'Konfirmasi & Cetak'; } });
if (logoutButton) { logoutButton.addEventListener('click', () => { auth.signOut(); }); }

// --- INISIALISASI APLIKASI UTAMA ---
async function initializeApp() {
    await fetchInventory();
    await fetchProducts();
    renderCart();
    fetchTransactions();
    listenForPendingOrders();
    setupSettings();
}